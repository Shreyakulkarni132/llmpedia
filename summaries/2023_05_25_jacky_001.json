{"Published": "2023-05-25", "Title": "Code as Policies: Language Model Programs for Embodied Control", "Authors": "Jacky Liang, Wenlong Huang, Fei Xia, Peng Xu, Karol Hausman, Brian Ichter, Pete Florence, Andy Zeng", "Summary": "Large language models (LLMs) trained on code completion have been shown to be capable of synthesizing simple Python programs from docstrings [1]. We find that these code-writing LLMs can be re-purposed to write robot policy code, given natural language commands. Specifically, policy code can express functions or feedback loops that process perception outputs (e.g.,from object detectors [2], [3]) and parameterize control primitive APIs. When provided as input several example language commands (formatted as comments) followed by corresponding policy code (via few-shot prompting), LLMs can take in new commands and autonomously re-compose API calls to generate new policy code respectively. By chaining classic logic structures and referencing third-party libraries (e.g., NumPy, Shapely) to perform arithmetic, LLMs used in this way can write robot policies that (i) exhibit spatial-geometric reasoning, (ii) generalize to new instructions, and (iii) prescribe precise values (e.g., velocities) to ambiguous descriptions (\"faster\") depending on context (i.e., behavioral commonsense). This paper presents code as policies: a robot-centric formulation of language model generated programs (LMPs) that can represent reactive policies (e.g., impedance controllers), as well as waypoint-based policies (vision-based pick and place, trajectory-based control), demonstrated across multiple real robot platforms. Central to our approach is prompting hierarchical code-gen (recursively defining undefined functions), which can write more complex code and also improves state-of-the-art to solve 39.8% of problems on the HumanEval [1] benchmark. Code and videos are available at https://code-as-policies.github.io", "main_contribution": "The paper introduces a novel approach to use Large Language Models (LLMs) for writing robot policy code based on natural language commands. The authors demonstrate that LLMs can autonomously re-compose API calls to generate new policy code, exhibiting spatial-geometric reasoning, generalizing to new instructions, and prescribing precise values to ambiguous descriptions. The paper also introduces a new method of prompting hierarchical code-gen, which allows for the writing of more complex code and improves the state-of-the-art performance on the HumanEval benchmark.", "takeaways": "The use of LLMs for writing robot policy code opens up new possibilities for robot control and automation. The ability of LLMs to autonomously re-compose API calls and generate new policy code can significantly reduce the manual effort required in programming robots. The introduction of hierarchical code-gen prompting also represents a significant advancement in the field of LLMs, improving their ability to write complex code and solve problems.", "novelty_analysis": "The application of LLMs for writing robot policy code represents a novel contribution to the field. The introduction of hierarchical code-gen prompting also represents a significant advancement in the field of LLMs. Compared to previous work, this paper presents a unique approach to using LLMs for robot control and automation.", "novelty_score": 3, "category": "USE CASES", "technical_analysis": "The paper is highly technical, discussing the use of LLMs for writing robot policy code and introducing a new method of prompting hierarchical code-gen. It requires a deep understanding of LLMs and robot control systems.", "technical_score": 3, "enjoyable_analysis": "The paper presents a novel and interesting application of LLMs, making it an enjoyable read for those interested in the field. However, the highly technical content may make it challenging for non-experts.", "enjoyable_score": 2}