{"Published": "2023-05-25", "Title": "Code as Policies: Language Model Programs for Embodied Control", "Authors": "Jacky Liang, Wenlong Huang, Fei Xia, Peng Xu, Karol Hausman, Brian Ichter, Pete Florence, Andy Zeng", "Summary": "Large language models (LLMs) trained on code completion have been shown to be capable of synthesizing simple Python programs from docstrings [1]. We find that these code-writing LLMs can be re-purposed to write robot policy code, given natural language commands. Specifically, policy code can express functions or feedback loops that process perception outputs (e.g.,from object detectors [2], [3]) and parameterize control primitive APIs. When provided as input several example language commands (formatted as comments) followed by corresponding policy code (via few-shot prompting), LLMs can take in new commands and autonomously re-compose API calls to generate new policy code respectively. By chaining classic logic structures and referencing third-party libraries (e.g., NumPy, Shapely) to perform arithmetic, LLMs used in this way can write robot policies that (i) exhibit spatial-geometric reasoning, (ii) generalize to new instructions, and (iii) prescribe precise values (e.g., velocities) to ambiguous descriptions (\"faster\") depending on context (i.e., behavioral commonsense). This paper presents code as policies: a robot-centric formulation of language model generated programs (LMPs) that can represent reactive policies (e.g., impedance controllers), as well as waypoint-based policies (vision-based pick and place, trajectory-based control), demonstrated across multiple real robot platforms. Central to our approach is prompting hierarchical code-gen (recursively defining undefined functions), which can write more complex code and also improves state-of-the-art to solve 39.8% of problems on the HumanEval [1] benchmark. Code and videos are available at https://code-as-policies.github.io", "main_contribution": {"headline": "LLMs can write robot policy code from natural language commands", "description": "The paper demonstrates that Large Language Models (LLMs), originally trained on code-completion tasks, can be repurposed to write robot policy code from natural language commands. The authors show that LLMs can generate policy code that processes perception outputs and parameterizes control primitive APIs. The LLMs can autonomously re-compose API calls to generate new policy code when given new commands. The paper introduces a robot-centric formulation of language model generated programs (LMPs) that can represent reactive policies and waypoint-based policies. The authors also highlight the importance of prompting hierarchical code-gen, which allows for the writing of more complex code and improves problem-solving capabilities."}, "takeaways": {"headline": "LLMs can be used to automate the generation of robot policy code", "description": "The paper's findings suggest that LLMs can be used to automate the generation of robot policy code, which could significantly streamline the process of programming robots. By providing LLMs with example language commands and corresponding policy code, the models can generate new policy code from new commands. This could be particularly useful in applications where the robot needs to adapt to new tasks or environments. For example, an LLM could be used to generate policy code for a robot that needs to perform a new task in a factory setting, based on a natural language description of the task.", "example": "For instance, given the command 'pick up the red block and place it on the blue block', the LLM could generate the following policy code: 'block_names = detect_objects(\"blocks\") for block_name in block_names: if get_color(block_name) == \"red\": red_block = block_name elif get_color(block_name) == \"blue\": blue_block = block_name move_to(red_block) pick_up() move_to(blue_block) place_down()'"}, "category": "USE CASES", "novelty_analysis": "The paper presents a novel application of LLMs in the field of robotics. The use of LLMs to generate robot policy code from natural language commands represents a significant advancement in the field, and the introduction of a robot-centric formulation of LMPs is a unique contribution.", "novelty_score": 3, "technical_analysis": "The paper is highly technical, as it delves into the details of how LLMs can be used to generate robot policy code. It requires a solid understanding of both LLMs and robotics to fully comprehend.", "technical_score": 3, "enjoyable_analysis": "The paper is well-written and presents a fascinating application of LLMs. However, its highly technical nature may make it less accessible to readers without a strong background in LLMs and robotics.", "enjoyable_score": 2}